/****************************************************************************
************************   T R A N S A C T - S Q L   ************************
************************ P R A C T I C A L   W O R K ************************
*****************************************************************************
*****  Lesson IV  ******      SUBQUERY. FUNCTION     ************************
****************************************************************************/

USE InternetShopDB
GO

--1) Вывести имена сотрудников, у которых было 4 и более заказов за все время (связанный подзапрос).
select stable.Name, COUNT(stable.Name) Orders from (select o.ID, e.FName+' '+e.LName Name from Employees e
join Orders o on o.EmployeeID=e.ID) stable
group by stable.Name
HAVING COUNT(stable.Name)>=4

select  e.FName+' '+e.LName Name, 
(select COUNT(o.ID) Count from Orders o where o.EmployeeID=e.ID having COUNT(o.ID) >=4) 
from Employees e


--2) Вывести список покупателей, у которых средняя сумма заказа больше чем среднее значение по всем заказам.


select inner_table.LName, AVG(inner_table.Total) AVGTotalPrice from (Select o.ID, c.LName, SUM(od.TotalPrice) Total from Customers c 
join Orders o on o.CustomerID=c.ID
join OrderDetails od on od.OrderID=o.id
GROUP BY o.Id, c.LName) inner_table
group by inner_table.LName
Having AVG(inner_table.Total)>(select AVG(inner_table.Total) from (select od.OrderID, SUM(od.TotalPrice) Total from OrderDetails od
group by od.OrderID) inner_table)








--3) Найти разницу суммы покупок по последним двум месяцам. 
--4) Создать функцию нахождения суммы покупки для упрощения предыдущего запроса. 
--   Функция принимает два параметра - даты начала и конца периода, за который проиходит суммирование. 
--   Создать предыдущий запрос используя данную функцию. 
--5) Найти разницу по сумме между клиентами, которые сделали заказ самостоятельно и клиентами, 
--   которые воспользовалисть помощью консультанта.
--   Здесь, также, можно реализовать функцию, которая будет возвращать "склееные" таблицы и принимать два
--   параметра (@DateFrom, @DateTo). Далее, мы сможем подставить функцию в выборку и указать необходимый фильтр.
--   Реализуйте данный функционал дома. 
--6) Создайте функцию, которая будет возвращать таблицу содержащую ID продукта, общее проданное количество продукта,
--   общую сумму и среднюю цену.
--7) Вывести список нетбуков и их средние цены, средняя стоимость которых превышает среднюю стоимость ноутбука.
--   Логика нахождения средних:
--   так как цена на один и тот же продукт изменяется, необходимо найти среднюю по каждому продукту, а потом по 
--   этим средним вычислять среднюю по группе разных продуктов (в данном случае две группы: Ноутбуки и Нетбуки).
--8) Найти разницу средней цены ноутбуков и нетбуков, т.e. на сколько в среднем ноутбук стоит дороже, чем нетбук.
--9) Вывести минимальную, максимальную, среднюю цены продаж по каждому товару, количество остатков на складе
--   и прогнозируемую выручу (пессимистичный, средний, оптимистчичный прогнозы).